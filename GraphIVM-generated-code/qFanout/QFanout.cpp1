#include <stdlib.h>
#include <string>
#include <chrono>
#include <iostream>
#include "DataStructures.hpp"
#include "Functions.hpp"
#include <pqxx/pqxx>

void addTweetTuple(int& userId, int& tweetId, const std::string& tweetDate, const bool dobfs);
void addFollower1Tuple(int& userId, int& followerId);
void addFollower2Tuple(int& userId, int& followerId);
void scan();

static TweetJoinTupleMap* tweetJoinTupleMap = new TweetJoinTupleMap;
static Follower1JoinTupleMap* follower1JoinTupleMap = new Follower1JoinTupleMap;
static Follower2JoinTupleMap* follower2JoinTupleMap = new Follower2JoinTupleMap;
static Follower2TweetVertexValueMap* follower2TweetVertexValueMap = new Follower2TweetVertexValueMap;
static Follower1Follower2VertexValueMap* follower1Follower2VertexValueMap = new Follower1Follower2VertexValueMap;
static int count1 = 0;

using namespace std;

int main(){
	try {//PT
	      pqxx::connection C("dbname=bsmagen100k user=gaurav password=gaurav \
	      hostaddr=127.0.0.1 port=5432");
	      if (C.is_open()) {
		 cout << "Opened database successfully: " << C.dbname() << endl;
	      } else {
		 cout << "Can't open database" << endl;
		 return -1;
	      }
	      std::string sql = "select user_id, follower_id from follower";
	      /* Create a non-transactional object. */
	      pqxx::nontransaction NU(C);
	      
	      /* Execute SQL query */
	      pqxx::result RU( NU.exec( sql ));
	      
	      /* List down all the records */
		cout<<"Start User Table Load"<<endl;
	      for (pqxx::result::const_iterator c = RU.begin(); c != RU.end(); ++c) {
			int user = c[0].as<int>();
			int follower = c[1].as<int>();
			addFollower1Tuple(user, follower); 
			addFollower2Tuple(user, follower); 
	      }
		cout<<"End User Table Load"<<endl;
		NU.commit();
		
	      sql = "select user_id, tweet_id, tweet_date from tweet";
	      /* Create a non-transactional object. */
	      pqxx::nontransaction NT(C);
	      
	      /* Execute SQL query */
	      pqxx::result RT( NT.exec( sql ));
	      
	      /* List down all the records */
		cout<<"Start Tweet Table Load"<<endl;
		const std::string dummy = "1992-01-01";
	      for (pqxx::result::const_iterator c = RT.begin(); c != RT.end(); ++c) {
			int c0 = c[0].as<int>();
			int c1 = c[1].as<int>();
			std::string c2 = c[2].as<string>();
			addTweetTuple(c0, c1,dummy, false);
	      }
		cout<<"End Tweet Table Load"<<endl;
		NT.commit();
		const int MAX = 50000;
		int X = 10000000;
		int fanout = 30;
		for(int j = 0; j < fanout; j++) {
			int u2 = 2 * X + j;
			int u0 = X + j;
			addFollower1Tuple(u2, u0);
		}
		for(int i = 0; i < MAX; i++) {
			for(int j = 0; j < fanout; j++) {
				int u1 = X + i;
				int u2 = 2 * X + j;
				addFollower2Tuple(u1, u2);
			}
		}
		cout<<"Start Inserting Tweet"<<endl;
		const std::string s("1991-01-01");
		const auto start_time = std::chrono::steady_clock::now();
		for(int i = 0; i < MAX; i++) {
			int u1 = X + i;
			int t1 = X + i;
			addTweetTuple(u1, t1, s, false);
		}
		scan();
		double time_in_seconds = std::chrono::duration_cast<std::chrono::milliseconds> (std::chrono::steady_clock::now() - start_time).count();
		std::cout << time_in_seconds<<"ms"<<std::endl;
		cout<<"count:"<<count1<<endl;
		cout<<"coll:"<<tweetJoinTupleMap->collissions<<endl;
	      C.disconnect();
	} catch (const std::exception &e){
		cout<<"Program Exited Abnotmally"<<endl;
	      cerr << e.what() << std::endl;
	}
}
void api(int x1, int x2) {count1++;}

//count is 1 for projected tuples
void bfsTweetDiff(TweetJoinTupleEntry* tweetJt, TweetProjectedTupleEntry* tweetPt) {
	for(Follower2JoinTupleEntry* j : tweetJt->follower2TweetVertexValue->follower2JoinTupleList) {
		for(Follower1JoinTupleEntry* k : j->follower1Follower2VertexValue->follower1JoinTupleList) {
			Follower1ProjectedTupleIteratorNext nextUserProjTuple = follower1ProjectedTupleIterator(k->follower1ProjectedTupleMap);
			for(Follower1ProjectedTupleEntry* o = nextUserProjTuple(); o ; o = nextUserProjTuple() ) {
				for(int k = 0; k < o->count; k++) {
					//cout<<o->follower1Id<<","<<tweetPt->tweetId<<endl;
					api(o->follower1Id, tweetPt->tweetId);
				}
			}
		}
	}
}
void scan() {
	TweetJoinTupleIteratorNext nextTweetJoinTuple = tweetJoinTupleIterator(tweetJoinTupleMap);
	for(TweetJoinTupleEntry* tweetJt = nextTweetJoinTuple(); tweetJt ; tweetJt = nextTweetJoinTuple() ) {
	TweetProjectedTupleIteratorNext nextTweetProjectedTuple = tweetProjectedTupleIterator(tweetJt->tweetProjectedTupleMap);
	for(TweetProjectedTupleEntry* tweetPt = nextTweetProjectedTuple(); tweetPt ; tweetPt = nextTweetProjectedTuple() ) {
	for(Follower2JoinTupleEntry* j : tweetJt->follower2TweetVertexValue->follower2JoinTupleList) {
		for(Follower1JoinTupleEntry* k : j->follower1Follower2VertexValue->follower1JoinTupleList) {
			Follower1ProjectedTupleIteratorNext nextUserProjTuple = follower1ProjectedTupleIterator(k->follower1ProjectedTupleMap);
			for(Follower1ProjectedTupleEntry* o = nextUserProjTuple(); o ; o = nextUserProjTuple() ) {
				for(int k = 0; k < o->count; k++) {
					//cout<<o->follower1Id<<","<<tweetPt->tweetId<<endl;
					api(o->follower1Id, tweetPt->tweetId);
				}
			}
		}
	}
	}
	}
}

void addTweetTuple(int& userId, int& tweetId, const std::string& tweetDate, const bool doBfs) {
	TweetJoinTupleEntry* joinTuple = putTweetJoinTupleIfAbsent(tweetJoinTupleMap, userId, follower2TweetVertexValueMap);
	TweetProjectedTupleEntry* pt = putTweetProjectedTuple(joinTuple->tweetProjectedTupleMap, userId, tweetId, tweetDate);
	if(doBfs)
		bfsTweetDiff(joinTuple, pt);
}

void addFollower1Tuple(int& userId, int& followerId) {
	Follower1JoinTupleEntry* jt = putFollower1JoinTupleIfAbsent(follower1JoinTupleMap, userId, follower1Follower2VertexValueMap);
	putFollower1ProjectedTuple(jt->follower1ProjectedTupleMap, followerId);
}

void addFollower2Tuple(int& userId, int& followerId) {
	putFollower2JoinTupleIfAbsent(follower2JoinTupleMap, userId, followerId, follower2TweetVertexValueMap, follower1Follower2VertexValueMap);
}

