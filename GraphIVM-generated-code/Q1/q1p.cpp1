#include <stdlib.h>
#include <cstring>
#include <chrono>
#include <iostream>
#include<pqxx/pqxx>

#include "DataStructures.hpp"
#include"Functions.hpp"

void addUserTuple(int& userId);
void addTweetTuple(int& userId, int& tweetId, std::string& tweetDate, bool doBfs);
void scan();
void bfsTweetDiffIndices(TweetJoinTupleEntry* tweetJt, TweetProjectedTupleEntry* tweetPt);

TweetJoinTupleMap* tweetJoinTupleMap = new TweetJoinTupleMap;
UserJoinTupleMap* userJoinTupleMap = new UserJoinTupleMap;
UserTweetVertexValueMap* userTweetVertexValueMap = new UserTweetVertexValueMap;

using namespace std;

int main(){
	try {//PT
	      pqxx::connection C("dbname=bsmagen1m user=gaurav password=gaurav \
	      hostaddr=127.0.0.1 port=5432");
	      if (C.is_open()) {
		 cout << "Opened database successfully: " << C.dbname() << endl;
	      } else {
		 cout << "Can't open database" << endl;
		 return -1;
	      }
	      std::string sql = "select * from users";
	      /* Create a non-transactional object. */
	      pqxx::nontransaction NU(C);
	      
	      /* Execute SQL query */
	      pqxx::result RU( NU.exec( sql ));
	      
	      /* List down all the records */
		cout<<"Start User Table Load"<<endl;
	      for (pqxx::result::const_iterator c = RU.begin(); c != RU.end(); ++c) {
			int user = c[0].as<long>();
			addUserTuple(user); 
	      }
		cout<<"End User Table Load"<<endl;
		NU.commit();
		
	      sql = "select user_id, tweet_id, tweet_date from tweet where tweet_id < 12404312";
	      /* Create a non-transactional object. */
	      pqxx::nontransaction NT(C);
	      
	      /* Execute SQL query */
	      pqxx::result RT( NT.exec( sql ));
	      
	      /* List down all the records */
		cout<<"Start Tweet Table Load"<<endl;
		int i = 0;
	      for (pqxx::result::const_iterator c = RT.begin(); c != RT.end(); ++c) {
			if(i++ % 1000 == 0)
				cout<<i<<endl;
			int c0 = c[0].as<int>();
			int c1 = c[1].as<int>();
			std::string c2 = c[2].as<string>();
			addTweetTuple(c0, c1, c2, false);
	      }
		cout<<"End Tweet Table Load"<<endl;
		NT.commit();
	      /* Create SQL statement */
	      sql = "select user_id, tweet_id, tweet_date, -1 as retweet_tweet_id from tweet T union select * from retweet order by 2 desc limit 50000";

	      /* Create a non-transactional object. */
	      pqxx::nontransaction N(C);
	      
	      /* Execute SQL query */
	      pqxx::result R( N.exec( sql ));
	      
	      /* List down all the records */
		std::string ts;
		long t0, t1;
		auto start_time = std::chrono::steady_clock::now();
	      for (pqxx::result::const_iterator c = R.begin(); c != R.end(); ++c) {
			if(c[3].as<long>() > -1) 
			{
				ts = c[2].as<string>();
				t0 = c[0].as<long>(); 
				t1 = c[1].as<long>();
			}
		}
		double overhead = std::chrono::duration_cast<std::chrono::milliseconds> (std::chrono::steady_clock::now() - start_time).count();
		start_time = std::chrono::steady_clock::now();
	      for (pqxx::result::const_iterator c = R.begin(); c != R.end(); ++c) {
			if(c[3].as<long>() == -1) 
			{
				int c0 = c[0].as<int>();
				int c1 = c[1].as<int>();
				std::string c2 = c[2].as<string>();
				addTweetTuple(c0, c1, c2, true);
			}
	      }
		double time_in_seconds = std::chrono::duration_cast<std::chrono::milliseconds> (std::chrono::steady_clock::now() - start_time).count();
		std::cout << time_in_seconds - overhead<<"ms"<<std::endl;
		std::cout << t0 << "," <<t1<<","<<ts<<endl;
		std::cout<<"coll:"<<userTweetVertexValueMap->collissions<<endl;
	      C.disconnect();
	} catch (const std::exception &e){
	      cerr << e.what() << std::endl;
	}
	return 0;
}
void api(int x1, int x2, int x3, std::string x4) {
//	cout<<x3<<endl;
}
//do cout
//count is 1 for projected tuples
void bfsTweetDiff(TweetJoinTupleEntry* tweetJt, TweetProjectedTupleEntry* tweetPt) {
	for(UserJoinTupleEntry* j : tweetJt->userTweetVertexValue->userJoinTupleList) {
		UserProjectedTupleIteratorNext nextUserProjTuple = userProjectedTupleIterator(j->userProjectedTupleMap);
		for(UserProjectedTupleEntry* o = nextUserProjTuple(); o ; o = nextUserProjTuple() ) {
			for(int k = 0; k < o->count; k++) {
				//cout<<tweetPt->userId<<","<<o->userId<<","<<tweetPt->tweetId<<","<<tweetPt->tweetDate <<endl;
				api(tweetPt->userId, o->userId, tweetPt->tweetId, tweetPt->tweetDate);
			}
		}
	}
}

void scan() {
}

void addTweetTuple(int& userId, int& tweetId, std::string& tweetDate, bool doBfs) {
	TweetJoinTupleEntry* joinTuple = putTweetJoinTupleIfAbsent(tweetJoinTupleMap, userId, userTweetVertexValueMap);
	TweetProjectedTupleEntry* pt = putTweetProjectedTuple(joinTuple->tweetProjectedTupleMap, userId, tweetId, tweetDate);
	if(doBfs)
		bfsTweetDiff(joinTuple, pt);
}

void addUserTuple(int& userId) {
	UserJoinTupleEntry* joinTuple = putUserJoinTupleIfAbsent(userJoinTupleMap, userId, userTweetVertexValueMap);
	putUserProjectedTuple(joinTuple->userProjectedTupleMap, userId);
}

