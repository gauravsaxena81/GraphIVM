#include <stdlib.h>
#include <string>
#include <chrono>
#include <iostream>
#include "DataStructures.hpp"
#include "Functions.hpp"

//%1 - tableName, %2 - attributes, both join and projected
void addFollower1Tuple(int& follower1IdUser2Id, int& user1Id );
void addFollower2Tuple(int& follower1IdUser2Id, int& follower2IdUser3Id );
void addFollower3Tuple(int& follower2IdUser3Id, int& follower3IdTweetUserId );
void addTweetTuple(int& follower3IdTweetUserId, int& tweetId );

void scan();

Follower1JoinTupleMap* follower1JoinTupleMap = new Follower1JoinTupleMap;
Follower2JoinTupleMap* follower2JoinTupleMap = new Follower2JoinTupleMap;
Follower3JoinTupleMap* follower3JoinTupleMap = new Follower3JoinTupleMap;
TweetJoinTupleMap* tweetJoinTupleMap = new TweetJoinTupleMap;
Follower1Follower2VertexValueMap* follower1Follower2VertexValueMap = new Follower1Follower2VertexValueMap;
Follower2Follower3VertexValueMap* follower2Follower3VertexValueMap = new Follower2Follower3VertexValueMap;
Follower3TweetVertexValueMap* follower3TweetVertexValueMap = new Follower3TweetVertexValueMap;

using namespace std;

int main() {
	int u0 = 0;
	int u1 = 1;
	int u2 = 2;
	int u3 = 3;
	int t1 = 10;
	addFollower1Tuple(u0, u1);
	addFollower1Tuple(u0, u2);
	addFollower2Tuple(u0, u2);
	addFollower3Tuple(u2, u3);
	addTweetTuple(u3, t1);
	auto start_time = std::chrono::steady_clock::now();
	double time_in_seconds = std::chrono::duration_cast<std::chrono::milliseconds> (std::chrono::steady_clock::now() - start_time).count();
	std::cout << time_in_seconds<<"ms"<<std::endl;
	return 0;
}
//%1 - all projected attributes
void api(int& user1Id, int& tweetId ) {}
void bfsFollower1Diff(Follower1JoinTupleEntry* follower1Jt , Follower1ProjectedTupleEntry* follower1Pt) {}

//%2 - both join and projected attributes
void bfsFollower2Diff(Follower2JoinTupleEntry* follower2Jt ) {}

//%2 - both join and projected attributes
void bfsFollower3Diff(Follower3JoinTupleEntry* follower3Jt ) {}

//%2 - both join and projected attributes
void bfsTweetDiff(TweetJoinTupleEntry* tweetJt, TweetProjectedTupleEntry* tweetPt) {
	for(Follower3JoinTupleEntry* j : tweetJt->follower3TweetVertexValue->follower3JoinTupleList) {
		for(Follower2JoinTupleEntry* k : j->follower2Follower3VertexValue->follower2JoinTupleList) {
			for(Follower1JoinTupleEntry* l : k->follower1Follower2VertexValue->follower1JoinTupleList) {
				Follower1ProjectedTupleIteratorNext nextUserProjTuple = follower1ProjectedTupleIterator(l->follower1ProjectedTupleMap);
				for(Follower1ProjectedTupleEntry* o = nextUserProjTuple(); o ; o = nextUserProjTuple() ) {
					for(int m = 0; m < o->count; m++) {
						cout<<o->user1Id<<","<<tweetPt->tweetId<<endl;
						//api(o->follower1Id, tweetPt->tweetId);
					}
				}
			}
		}
	}
}

//%2 - both join and projected attributes

//%2 - both join and projected attributes
void addFollower1Tuple(int& follower1IdUser2Id, int& user1Id ) {
    //%3 - join attributes, %4 - vertex value maps
	Follower1JoinTupleEntry* jt = putFollower1JoinTupleIfAbsent(follower1JoinTupleMap, follower1IdUser2Id , follower1Follower2VertexValueMap );
	//%3 - projected attributes
	Follower1ProjectedTupleEntry* pt = putFollower1ProjectedTuple(jt->follower1ProjectedTupleMap, user1Id );
	bfsFollower1Diff(jt , pt);
}

//%2 - both join and projected attributes
void addFollower2Tuple(int& follower1IdUser2Id, int& follower2IdUser3Id ) {
    //%3 - join attributes, %4 - vertex value maps
	Follower2JoinTupleEntry* jt = putFollower2JoinTupleIfAbsent(follower2JoinTupleMap, follower1IdUser2Id, follower2IdUser3Id , follower1Follower2VertexValueMap, follower2Follower3VertexValueMap );
	//%3 - projected attributes
	bfsFollower2Diff(jt );
}

//%2 - both join and projected attributes
void addFollower3Tuple(int& follower2IdUser3Id, int& follower3IdTweetUserId ) {
    //%3 - join attributes, %4 - vertex value maps
	Follower3JoinTupleEntry* jt = putFollower3JoinTupleIfAbsent(follower3JoinTupleMap, follower2IdUser3Id, follower3IdTweetUserId , follower2Follower3VertexValueMap, follower3TweetVertexValueMap );
	//%3 - projected attributes
	bfsFollower3Diff(jt );
}

//%2 - both join and projected attributes
void addTweetTuple(int& follower3IdTweetUserId, int& tweetId ) {
    //%3 - join attributes, %4 - vertex value maps
	TweetJoinTupleEntry* jt = putTweetJoinTupleIfAbsent(tweetJoinTupleMap, follower3IdTweetUserId , follower3TweetVertexValueMap );
	//%3 - projected attributes
	TweetProjectedTupleEntry* pt = putTweetProjectedTuple(jt->tweetProjectedTupleMap, tweetId );
	bfsTweetDiff(jt , pt);
}
